// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gravity/gravity.proto

/*
Package gravity is a generated protocol buffer package.

It is generated from these files:
	gravity/gravity.proto

It has these top-level messages:
	PutReq
	PutResp
	FlushTaskPart
	FlushTask
*/
package gravity

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import celestial "github.com/c12s/scheme/celestial"
import blackhole "github.com/c12s/scheme/blackhole"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PutReq struct {
	Key  string               `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Task *celestial.MutateReq `protobuf:"bytes,2,opt,name=task" json:"task,omitempty"`
}

func (m *PutReq) Reset()                    { *m = PutReq{} }
func (m *PutReq) String() string            { return proto.CompactTextString(m) }
func (*PutReq) ProtoMessage()               {}
func (*PutReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PutReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PutReq) GetTask() *celestial.MutateReq {
	if m != nil {
		return m.Task
	}
	return nil
}

type PutResp struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *PutResp) Reset()                    { *m = PutResp{} }
func (m *PutResp) String() string            { return proto.CompactTextString(m) }
func (*PutResp) ProtoMessage()               {}
func (*PutResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PutResp) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type FlushTaskPart struct {
	Nodes []string `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *FlushTaskPart) Reset()                    { *m = FlushTaskPart{} }
func (m *FlushTaskPart) String() string            { return proto.CompactTextString(m) }
func (*FlushTaskPart) ProtoMessage()               {}
func (*FlushTaskPart) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FlushTaskPart) GetNodes() []string {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type FlushTask struct {
	Parts    []*FlushTaskPart     `protobuf:"bytes,1,rep,name=parts" json:"parts,omitempty"`
	Payload  []*blackhole.Payload `protobuf:"bytes,2,rep,name=payload" json:"payload,omitempty"`
	Strategy *blackhole.Strategy  `protobuf:"bytes,3,opt,name=strategy" json:"strategy,omitempty"`
}

func (m *FlushTask) Reset()                    { *m = FlushTask{} }
func (m *FlushTask) String() string            { return proto.CompactTextString(m) }
func (*FlushTask) ProtoMessage()               {}
func (*FlushTask) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FlushTask) GetParts() []*FlushTaskPart {
	if m != nil {
		return m.Parts
	}
	return nil
}

func (m *FlushTask) GetPayload() []*blackhole.Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *FlushTask) GetStrategy() *blackhole.Strategy {
	if m != nil {
		return m.Strategy
	}
	return nil
}

func init() {
	proto.RegisterType((*PutReq)(nil), "gravity.PutReq")
	proto.RegisterType((*PutResp)(nil), "gravity.PutResp")
	proto.RegisterType((*FlushTaskPart)(nil), "gravity.FlushTaskPart")
	proto.RegisterType((*FlushTask)(nil), "gravity.FlushTask")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GravityService service

type GravityServiceClient interface {
	PutTask(ctx context.Context, in *PutReq, opts ...grpc.CallOption) (*PutResp, error)
}

type gravityServiceClient struct {
	cc *grpc.ClientConn
}

func NewGravityServiceClient(cc *grpc.ClientConn) GravityServiceClient {
	return &gravityServiceClient{cc}
}

func (c *gravityServiceClient) PutTask(ctx context.Context, in *PutReq, opts ...grpc.CallOption) (*PutResp, error) {
	out := new(PutResp)
	err := grpc.Invoke(ctx, "/gravity.GravityService/PutTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GravityService service

type GravityServiceServer interface {
	PutTask(context.Context, *PutReq) (*PutResp, error)
}

func RegisterGravityServiceServer(s *grpc.Server, srv GravityServiceServer) {
	s.RegisterService(&_GravityService_serviceDesc, srv)
}

func _GravityService_PutTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GravityServiceServer).PutTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.GravityService/PutTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GravityServiceServer).PutTask(ctx, req.(*PutReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _GravityService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gravity.GravityService",
	HandlerType: (*GravityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutTask",
			Handler:    _GravityService_PutTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gravity/gravity.proto",
}

func init() { proto.RegisterFile("gravity/gravity.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xc1, 0x4e, 0xfa, 0x40,
	0x10, 0xc6, 0xff, 0x85, 0x3f, 0x20, 0x43, 0x54, 0xb2, 0xa2, 0x29, 0x1c, 0xb4, 0x69, 0x62, 0xc2,
	0x81, 0xb4, 0xb1, 0xbe, 0x80, 0x31, 0x46, 0x4f, 0x26, 0x64, 0xf1, 0xe4, 0x6d, 0x29, 0x13, 0xda,
	0xb4, 0xb0, 0x65, 0x77, 0x4a, 0xd2, 0x37, 0xf1, 0x71, 0x0d, 0xbb, 0xa5, 0xc8, 0x69, 0x67, 0xf6,
	0xfb, 0xe5, 0xdb, 0xf9, 0x76, 0xe0, 0x76, 0xad, 0xc4, 0x3e, 0xa5, 0x2a, 0xac, 0xcf, 0xa0, 0x50,
	0x92, 0x24, 0xeb, 0xd5, 0xed, 0x64, 0x1c, 0x63, 0x8e, 0x9a, 0x52, 0x91, 0x87, 0x4d, 0x65, 0x99,
	0xc9, 0x78, 0x99, 0x8b, 0x38, 0x4b, 0x64, 0x8e, 0x61, 0x53, 0x59, 0xc9, 0x7f, 0x83, 0xee, 0xbc,
	0x24, 0x8e, 0x3b, 0x36, 0x84, 0x76, 0x86, 0x95, 0xeb, 0x78, 0xce, 0xb4, 0xcf, 0x0f, 0x25, 0x9b,
	0xc2, 0x7f, 0x12, 0x3a, 0x73, 0x5b, 0x9e, 0x33, 0x1d, 0x44, 0xa3, 0xe0, 0x64, 0xfb, 0x59, 0x92,
	0x20, 0xe4, 0xb8, 0xe3, 0x86, 0xf0, 0x1f, 0xa0, 0x67, 0x5c, 0x74, 0xc1, 0x46, 0xd0, 0x21, 0x99,
	0xe1, 0xb6, 0x36, 0xb2, 0x8d, 0xff, 0x08, 0x97, 0xef, 0x79, 0xa9, 0x93, 0x2f, 0xa1, 0xb3, 0xb9,
	0x50, 0x74, 0xc0, 0xb6, 0x72, 0x85, 0xda, 0x75, 0xbc, 0xf6, 0x01, 0x33, 0x8d, 0xff, 0xe3, 0x40,
	0xbf, 0xe1, 0xd8, 0x0c, 0x3a, 0x85, 0x50, 0x64, 0x99, 0x41, 0x74, 0x17, 0x1c, 0x93, 0x9f, 0x59,
	0x71, 0x0b, 0xb1, 0x19, 0xf4, 0x0a, 0x51, 0xe5, 0x52, 0xac, 0xdc, 0x96, 0xe1, 0x59, 0x70, 0x0a,
	0x3b, 0xb7, 0x0a, 0x3f, 0x22, 0x2c, 0x84, 0x0b, 0x4d, 0x4a, 0x10, 0xae, 0x2b, 0xb7, 0x6d, 0xf2,
	0xdd, 0xfc, 0xc1, 0x17, 0xb5, 0xc4, 0x1b, 0x28, 0x7a, 0x81, 0xab, 0x0f, 0xfb, 0xfc, 0x02, 0xd5,
	0x3e, 0x8d, 0x91, 0x05, 0x26, 0xb4, 0x99, 0xf4, 0xba, 0x19, 0xcd, 0x7e, 0xe6, 0x64, 0x78, 0x7e,
	0xa1, 0x0b, 0xff, 0xdf, 0xab, 0xf7, 0x7d, 0xbf, 0x4e, 0x29, 0x29, 0x97, 0x41, 0x2c, 0x37, 0x61,
	0xfc, 0x14, 0xe9, 0x50, 0xc7, 0x09, 0x6e, 0xf0, 0xb8, 0xd1, 0x65, 0xd7, 0xec, 0xe4, 0xf9, 0x37,
	0x00, 0x00, 0xff, 0xff, 0xc5, 0x77, 0x0b, 0x20, 0xeb, 0x01, 0x00, 0x00,
}
