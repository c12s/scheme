// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stellar/stellar.proto

/*
Package stellar is a generated protocol buffer package.

It is generated from these files:
	stellar/stellar.proto

It has these top-level messages:
	SpanContext
	Span
	ListReq
	ListResp
	GetReq
	GetResp
*/
package stellar

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SpanContext struct {
	TraceId       string            `protobuf:"bytes,1,opt,name=traceId" json:"traceId,omitempty"`
	SpanId        int64             `protobuf:"varint,2,opt,name=spanId" json:"spanId,omitempty"`
	ParrentSpanId int64             `protobuf:"varint,4,opt,name=parrentSpanId" json:"parrentSpanId,omitempty"`
	Baggage       map[string]string `protobuf:"bytes,5,rep,name=baggage" json:"baggage,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SpanContext) Reset()                    { *m = SpanContext{} }
func (m *SpanContext) String() string            { return proto.CompactTextString(m) }
func (*SpanContext) ProtoMessage()               {}
func (*SpanContext) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SpanContext) GetTraceId() string {
	if m != nil {
		return m.TraceId
	}
	return ""
}

func (m *SpanContext) GetSpanId() int64 {
	if m != nil {
		return m.SpanId
	}
	return 0
}

func (m *SpanContext) GetParrentSpanId() int64 {
	if m != nil {
		return m.ParrentSpanId
	}
	return 0
}

func (m *SpanContext) GetBaggage() map[string]string {
	if m != nil {
		return m.Baggage
	}
	return nil
}

type Span struct {
	SpanContext *SpanContext      `protobuf:"bytes,1,opt,name=spanContext" json:"spanContext,omitempty"`
	Name        string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Logs        map[string]string `protobuf:"bytes,3,rep,name=logs" json:"logs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Tags        map[string]string `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StartTime   int64             `protobuf:"varint,5,opt,name=startTime" json:"startTime,omitempty"`
	EndTime     int64             `protobuf:"varint,6,opt,name=endTime" json:"endTime,omitempty"`
}

func (m *Span) Reset()                    { *m = Span{} }
func (m *Span) String() string            { return proto.CompactTextString(m) }
func (*Span) ProtoMessage()               {}
func (*Span) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Span) GetSpanContext() *SpanContext {
	if m != nil {
		return m.SpanContext
	}
	return nil
}

func (m *Span) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Span) GetLogs() map[string]string {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *Span) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Span) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Span) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type ListReq struct {
	Query map[string]string `protobuf:"bytes,1,rep,name=query" json:"query,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ListReq) Reset()                    { *m = ListReq{} }
func (m *ListReq) String() string            { return proto.CompactTextString(m) }
func (*ListReq) ProtoMessage()               {}
func (*ListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ListReq) GetQuery() map[string]string {
	if m != nil {
		return m.Query
	}
	return nil
}

type ListResp struct {
	Traces []*GetResp `protobuf:"bytes,1,rep,name=traces" json:"traces,omitempty"`
}

func (m *ListResp) Reset()                    { *m = ListResp{} }
func (m *ListResp) String() string            { return proto.CompactTextString(m) }
func (*ListResp) ProtoMessage()               {}
func (*ListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListResp) GetTraces() []*GetResp {
	if m != nil {
		return m.Traces
	}
	return nil
}

type GetReq struct {
	TraceId string `protobuf:"bytes,1,opt,name=traceId" json:"traceId,omitempty"`
}

func (m *GetReq) Reset()                    { *m = GetReq{} }
func (m *GetReq) String() string            { return proto.CompactTextString(m) }
func (*GetReq) ProtoMessage()               {}
func (*GetReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetReq) GetTraceId() string {
	if m != nil {
		return m.TraceId
	}
	return ""
}

type GetResp struct {
	Trace []*Span `protobuf:"bytes,1,rep,name=trace" json:"trace,omitempty"`
}

func (m *GetResp) Reset()                    { *m = GetResp{} }
func (m *GetResp) String() string            { return proto.CompactTextString(m) }
func (*GetResp) ProtoMessage()               {}
func (*GetResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetResp) GetTrace() []*Span {
	if m != nil {
		return m.Trace
	}
	return nil
}

func init() {
	proto.RegisterType((*SpanContext)(nil), "stellar.SpanContext")
	proto.RegisterType((*Span)(nil), "stellar.Span")
	proto.RegisterType((*ListReq)(nil), "stellar.ListReq")
	proto.RegisterType((*ListResp)(nil), "stellar.ListResp")
	proto.RegisterType((*GetReq)(nil), "stellar.GetReq")
	proto.RegisterType((*GetResp)(nil), "stellar.GetResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StellarService service

type StellarServiceClient interface {
	List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error)
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error)
}

type stellarServiceClient struct {
	cc *grpc.ClientConn
}

func NewStellarServiceClient(cc *grpc.ClientConn) StellarServiceClient {
	return &stellarServiceClient{cc}
}

func (c *stellarServiceClient) List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error) {
	out := new(ListResp)
	err := grpc.Invoke(ctx, "/stellar.StellarService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stellarServiceClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error) {
	out := new(GetResp)
	err := grpc.Invoke(ctx, "/stellar.StellarService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StellarService service

type StellarServiceServer interface {
	List(context.Context, *ListReq) (*ListResp, error)
	Get(context.Context, *GetReq) (*GetResp, error)
}

func RegisterStellarServiceServer(s *grpc.Server, srv StellarServiceServer) {
	s.RegisterService(&_StellarService_serviceDesc, srv)
}

func _StellarService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StellarServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.StellarService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StellarServiceServer).List(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StellarService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StellarServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.StellarService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StellarServiceServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _StellarService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stellar.StellarService",
	HandlerType: (*StellarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _StellarService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _StellarService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stellar/stellar.proto",
}

func init() { proto.RegisterFile("stellar/stellar.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 467 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xad, 0x63, 0xc7, 0x26, 0x13, 0x0a, 0x61, 0x54, 0xc0, 0x32, 0x08, 0x05, 0xc3, 0x21, 0x02,
	0xe1, 0xa8, 0x01, 0x41, 0x55, 0x6e, 0x45, 0xa8, 0xaa, 0xd4, 0x0b, 0x4e, 0x4f, 0xdc, 0x36, 0xce,
	0xc8, 0x8d, 0x9a, 0xd8, 0xce, 0xee, 0x26, 0xa2, 0x7f, 0x94, 0x23, 0xbf, 0x05, 0xed, 0x87, 0x9d,
	0xa4, 0x94, 0x43, 0x4e, 0xf6, 0xcc, 0x7b, 0x33, 0xef, 0xcd, 0xec, 0x2e, 0x3c, 0x15, 0x92, 0xe6,
	0x73, 0xc6, 0x87, 0xf6, 0x9b, 0x54, 0xbc, 0x94, 0x25, 0x06, 0x36, 0x8c, 0xff, 0x38, 0xd0, 0x1d,
	0x57, 0xac, 0xf8, 0x56, 0x16, 0x92, 0x7e, 0x49, 0x0c, 0x21, 0x90, 0x9c, 0x65, 0x74, 0x31, 0x0d,
	0x9d, 0xbe, 0x33, 0xe8, 0xa4, 0x75, 0x88, 0xcf, 0xc0, 0x17, 0x15, 0x2b, 0x2e, 0xa6, 0x61, 0xab,
	0xef, 0x0c, 0xdc, 0xd4, 0x46, 0xf8, 0x16, 0x0e, 0x2b, 0xc6, 0x39, 0x15, 0x72, 0x6c, 0x60, 0x4f,
	0xc3, 0xbb, 0x49, 0xfc, 0x0a, 0xc1, 0x84, 0xe5, 0x39, 0xcb, 0x29, 0x6c, 0xf7, 0xdd, 0x41, 0x77,
	0xf4, 0x3a, 0xa9, 0x1d, 0x6d, 0xc9, 0x27, 0x67, 0x86, 0xf3, 0xbd, 0x90, 0xfc, 0x36, 0xad, 0x2b,
	0xa2, 0x53, 0x78, 0xb8, 0x0d, 0x60, 0x0f, 0xdc, 0x1b, 0xba, 0xb5, 0x06, 0xd5, 0x2f, 0x1e, 0x41,
	0x7b, 0xcd, 0xe6, 0x2b, 0xd2, 0xde, 0x3a, 0xa9, 0x09, 0x4e, 0x5b, 0x27, 0x4e, 0xfc, 0xbb, 0x05,
	0x9e, 0x52, 0xc0, 0xcf, 0xd0, 0x15, 0x1b, 0x25, 0x5d, 0xdc, 0x1d, 0x1d, 0xdd, 0xe7, 0x22, 0xdd,
	0x26, 0x22, 0x82, 0x57, 0xb0, 0x45, 0xdd, 0x59, 0xff, 0xe3, 0x7b, 0xf0, 0xe6, 0x65, 0x2e, 0x42,
	0x57, 0x8f, 0xf2, 0x7c, 0xa7, 0x49, 0x72, 0x59, 0xe6, 0xc2, 0x0c, 0xa0, 0x49, 0x8a, 0x2c, 0x59,
	0x2e, 0x42, 0xef, 0x3e, 0xf2, 0x15, 0x6b, 0xc8, 0x8a, 0x84, 0x2f, 0xa1, 0x23, 0x24, 0xe3, 0xf2,
	0x6a, 0xb6, 0x50, 0x9b, 0x52, 0x9b, 0xdc, 0x24, 0xd4, 0xe9, 0x50, 0x31, 0xd5, 0x98, 0xaf, 0xb1,
	0x3a, 0x8c, 0xbe, 0x40, 0xa7, 0xd1, 0xdd, 0x67, 0x3f, 0xaa, 0xb0, 0xf1, 0xb0, 0xd7, 0x62, 0xd7,
	0x10, 0x5c, 0xce, 0x84, 0x4c, 0x69, 0x89, 0xc7, 0xd0, 0x5e, 0xae, 0x88, 0xab, 0x42, 0x35, 0xe2,
	0x8b, 0x66, 0x44, 0x4b, 0x48, 0x7e, 0x28, 0xd4, 0x8c, 0x69, 0x98, 0xd1, 0x09, 0xc0, 0x26, 0xb9,
	0x97, 0xee, 0x27, 0x78, 0x60, 0xda, 0x8a, 0x0a, 0x07, 0xe0, 0xeb, 0xeb, 0x29, 0xac, 0x72, 0xaf,
	0x51, 0x3e, 0x27, 0xcd, 0x48, 0x2d, 0x1e, 0xc7, 0xe0, 0xeb, 0xd4, 0xf2, 0xff, 0x37, 0x3c, 0x4e,
	0x20, 0xb0, 0x65, 0xf8, 0x06, 0xda, 0x3a, 0x6b, 0xfb, 0x1e, 0xee, 0x1c, 0x5a, 0x6a, 0xb0, 0xd1,
	0x0d, 0x3c, 0x1a, 0x9b, 0xf4, 0x98, 0xf8, 0x7a, 0x96, 0x11, 0x7e, 0x00, 0x4f, 0x79, 0xc3, 0xde,
	0xdd, 0x0d, 0x44, 0x4f, 0xee, 0x64, 0x44, 0x15, 0x1f, 0xe0, 0x3b, 0x70, 0xcf, 0x49, 0xe2, 0xe3,
	0x5d, 0xd7, 0xcb, 0xe8, 0x9f, 0x31, 0xe2, 0x83, 0xb3, 0xfe, 0xcf, 0x57, 0xf9, 0x4c, 0x5e, 0xaf,
	0x26, 0x49, 0x56, 0x2e, 0x86, 0xd9, 0xf1, 0x48, 0x0c, 0x45, 0x76, 0x4d, 0x0b, 0xaa, 0x5f, 0xf6,
	0xc4, 0xd7, 0x4f, 0xfb, 0xe3, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1a, 0xa7, 0x73, 0x19, 0xf3,
	0x03, 0x00, 0x00,
}
