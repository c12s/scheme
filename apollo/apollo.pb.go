// Code generated by protoc-gen-go. DO NOT EDIT.
// source: apollo/apollo.proto

/*
Package apollo is a generated protocol buffer package.

It is generated from these files:
	apollo/apollo.proto

It has these top-level messages:
	AuthOpt
	AuthResp
	GetReq
	GetResp
*/
package apollo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AuthOpt struct {
	Data map[string]string `protobuf:"bytes,1,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *AuthOpt) Reset()                    { *m = AuthOpt{} }
func (m *AuthOpt) String() string            { return proto.CompactTextString(m) }
func (*AuthOpt) ProtoMessage()               {}
func (*AuthOpt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AuthOpt) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

type AuthResp struct {
	Value bool `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *AuthResp) Reset()                    { *m = AuthResp{} }
func (m *AuthResp) String() string            { return proto.CompactTextString(m) }
func (*AuthResp) ProtoMessage()               {}
func (*AuthResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AuthResp) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type GetReq struct {
	User string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *GetReq) Reset()                    { *m = GetReq{} }
func (m *GetReq) String() string            { return proto.CompactTextString(m) }
func (*GetReq) ProtoMessage()               {}
func (*GetReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetReq) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type GetResp struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *GetResp) Reset()                    { *m = GetResp{} }
func (m *GetResp) String() string            { return proto.CompactTextString(m) }
func (*GetResp) ProtoMessage()               {}
func (*GetResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetResp) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*AuthOpt)(nil), "apollo.AuthOpt")
	proto.RegisterType((*AuthResp)(nil), "apollo.AuthResp")
	proto.RegisterType((*GetReq)(nil), "apollo.GetReq")
	proto.RegisterType((*GetResp)(nil), "apollo.GetResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ApolloService service

type ApolloServiceClient interface {
	GetToken(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error)
	Auth(ctx context.Context, in *AuthOpt, opts ...grpc.CallOption) (*AuthResp, error)
}

type apolloServiceClient struct {
	cc *grpc.ClientConn
}

func NewApolloServiceClient(cc *grpc.ClientConn) ApolloServiceClient {
	return &apolloServiceClient{cc}
}

func (c *apolloServiceClient) GetToken(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error) {
	out := new(GetResp)
	err := grpc.Invoke(ctx, "/apollo.ApolloService/GetToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apolloServiceClient) Auth(ctx context.Context, in *AuthOpt, opts ...grpc.CallOption) (*AuthResp, error) {
	out := new(AuthResp)
	err := grpc.Invoke(ctx, "/apollo.ApolloService/Auth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ApolloService service

type ApolloServiceServer interface {
	GetToken(context.Context, *GetReq) (*GetResp, error)
	Auth(context.Context, *AuthOpt) (*AuthResp, error)
}

func RegisterApolloServiceServer(s *grpc.Server, srv ApolloServiceServer) {
	s.RegisterService(&_ApolloService_serviceDesc, srv)
}

func _ApolloService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApolloServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apollo.ApolloService/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApolloServiceServer).GetToken(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApolloService_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthOpt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApolloServiceServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apollo.ApolloService/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApolloServiceServer).Auth(ctx, req.(*AuthOpt))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApolloService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apollo.ApolloService",
	HandlerType: (*ApolloServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _ApolloService_GetToken_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _ApolloService_Auth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apollo/apollo.proto",
}

func init() { proto.RegisterFile("apollo/apollo.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x50, 0x4b, 0x4f, 0x83, 0x40,
	0x10, 0x96, 0x16, 0x29, 0x1d, 0xa3, 0x6d, 0x46, 0x0f, 0x48, 0x34, 0x25, 0x9c, 0x9a, 0x98, 0x42,
	0xc4, 0x83, 0xc6, 0x5b, 0x8d, 0xa6, 0x47, 0x13, 0xf4, 0xe4, 0x6d, 0x8b, 0x13, 0x69, 0xa0, 0x5d,
	0x0a, 0x43, 0x93, 0xfe, 0x7b, 0xc3, 0xee, 0xfa, 0x3c, 0xed, 0x7c, 0x8f, 0x99, 0x9d, 0xf9, 0xe0,
	0x54, 0x54, 0xb2, 0x2c, 0x65, 0xac, 0x9f, 0xa8, 0xaa, 0x25, 0x4b, 0x74, 0x34, 0x0a, 0xb7, 0x30,
	0x98, 0xb7, 0x9c, 0x3f, 0x57, 0x8c, 0x33, 0xb0, 0xdf, 0x05, 0x0b, 0xcf, 0x0a, 0xfa, 0xd3, 0xa3,
	0xe4, 0x3c, 0x32, 0x7e, 0x23, 0x47, 0x8f, 0x82, 0xc5, 0xd3, 0x86, 0xeb, 0x7d, 0xaa, 0x6c, 0xfe,
	0x2d, 0x0c, 0xbf, 0x29, 0x1c, 0x43, 0xbf, 0xa0, 0xbd, 0x67, 0x05, 0xd6, 0x74, 0x98, 0x76, 0x25,
	0x9e, 0xc1, 0xe1, 0x4e, 0x94, 0x2d, 0x79, 0x3d, 0xc5, 0x69, 0x70, 0xdf, 0xbb, 0xb3, 0xc2, 0x00,
	0xdc, 0x6e, 0x66, 0x4a, 0x4d, 0xf5, 0xe3, 0xea, 0x3a, 0x5d, 0xe3, 0x0a, 0x2f, 0xc0, 0x59, 0x10,
	0xa7, 0xb4, 0x45, 0x04, 0xbb, 0x6d, 0xa8, 0x36, 0x83, 0x55, 0x1d, 0x4e, 0x60, 0xa0, 0x54, 0xdd,
	0xce, 0xb2, 0xa0, 0x8d, 0xd1, 0x35, 0x48, 0x0a, 0x38, 0x9e, 0xab, 0xdd, 0x5f, 0xa8, 0xde, 0xad,
	0x32, 0xc2, 0x19, 0xb8, 0x0b, 0xe2, 0xd7, 0x4e, 0xc4, 0x93, 0xaf, 0xbb, 0xf4, 0x0f, 0xfe, 0xe8,
	0x0f, 0x6e, 0xaa, 0xf0, 0x00, 0xaf, 0xc0, 0xee, 0x16, 0xc4, 0xd1, 0xbf, 0x08, 0xfc, 0xf1, 0x6f,
	0x42, 0x9b, 0x1f, 0x26, 0x6f, 0x97, 0x1f, 0x2b, 0xce, 0xdb, 0x65, 0x94, 0xc9, 0x75, 0x9c, 0x5d,
	0x27, 0x4d, 0xdc, 0x64, 0x39, 0xad, 0xc9, 0xe4, 0xbd, 0x74, 0x54, 0xe0, 0x37, 0x9f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x41, 0xe4, 0xa4, 0x81, 0x87, 0x01, 0x00, 0x00,
}
