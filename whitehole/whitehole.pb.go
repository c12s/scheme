// Code generated by protoc-gen-go. DO NOT EDIT.
// source: whitehole/whitehole.proto

/*
Package whitehole is a generated protocol buffer package.

It is generated from these files:
	whitehole/whitehole.proto

It has these top-level messages:
	PutReq
	WResp
	ListReq
*/
package whitehole

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PutReq struct {
	Task   string `protobuf:"bytes,1,opt,name=task" json:"task,omitempty"`
	Detail string `protobuf:"bytes,2,opt,name=detail" json:"detail,omitempty"`
	Level  string `protobuf:"bytes,3,opt,name=level" json:"level,omitempty"`
}

func (m *PutReq) Reset()                    { *m = PutReq{} }
func (m *PutReq) String() string            { return proto.CompactTextString(m) }
func (*PutReq) ProtoMessage()               {}
func (*PutReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PutReq) GetTask() string {
	if m != nil {
		return m.Task
	}
	return ""
}

func (m *PutReq) GetDetail() string {
	if m != nil {
		return m.Detail
	}
	return ""
}

func (m *PutReq) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

type WResp struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *WResp) Reset()                    { *m = WResp{} }
func (m *WResp) String() string            { return proto.CompactTextString(m) }
func (*WResp) ProtoMessage()               {}
func (*WResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *WResp) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type ListReq struct {
}

func (m *ListReq) Reset()                    { *m = ListReq{} }
func (m *ListReq) String() string            { return proto.CompactTextString(m) }
func (*ListReq) ProtoMessage()               {}
func (*ListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*PutReq)(nil), "whitehole.PutReq")
	proto.RegisterType((*WResp)(nil), "whitehole.WResp")
	proto.RegisterType((*ListReq)(nil), "whitehole.ListReq")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for WhiteholeService service

type WhiteholeServiceClient interface {
	Put(ctx context.Context, in *PutReq, opts ...grpc.CallOption) (*WResp, error)
	List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*WResp, error)
}

type whiteholeServiceClient struct {
	cc *grpc.ClientConn
}

func NewWhiteholeServiceClient(cc *grpc.ClientConn) WhiteholeServiceClient {
	return &whiteholeServiceClient{cc}
}

func (c *whiteholeServiceClient) Put(ctx context.Context, in *PutReq, opts ...grpc.CallOption) (*WResp, error) {
	out := new(WResp)
	err := grpc.Invoke(ctx, "/whitehole.WhiteholeService/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whiteholeServiceClient) List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*WResp, error) {
	out := new(WResp)
	err := grpc.Invoke(ctx, "/whitehole.WhiteholeService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WhiteholeService service

type WhiteholeServiceServer interface {
	Put(context.Context, *PutReq) (*WResp, error)
	List(context.Context, *ListReq) (*WResp, error)
}

func RegisterWhiteholeServiceServer(s *grpc.Server, srv WhiteholeServiceServer) {
	s.RegisterService(&_WhiteholeService_serviceDesc, srv)
}

func _WhiteholeService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhiteholeServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/whitehole.WhiteholeService/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhiteholeServiceServer).Put(ctx, req.(*PutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhiteholeService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhiteholeServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/whitehole.WhiteholeService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhiteholeServiceServer).List(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _WhiteholeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "whitehole.WhiteholeService",
	HandlerType: (*WhiteholeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _WhiteholeService_Put_Handler,
		},
		{
			MethodName: "List",
			Handler:    _WhiteholeService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "whitehole/whitehole.proto",
}

func init() { proto.RegisterFile("whitehole/whitehole.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x41, 0x4f, 0x84, 0x30,
	0x10, 0x85, 0x5d, 0x77, 0x17, 0xc3, 0x9c, 0x70, 0x62, 0x0c, 0x9a, 0x98, 0x90, 0x9e, 0x3c, 0x98,
	0x12, 0xf1, 0x1f, 0x78, 0x34, 0x1e, 0x08, 0x1e, 0x48, 0xbc, 0x41, 0x9d, 0xd8, 0xc6, 0x92, 0x62,
	0x5b, 0xf0, 0xef, 0x1b, 0x0a, 0x22, 0x87, 0xbd, 0xcd, 0xfb, 0x66, 0xf2, 0xe6, 0xe5, 0xc1, 0xcd,
	0x8f, 0x54, 0x9e, 0xa4, 0xd1, 0x94, 0xaf, 0x13, 0xef, 0xad, 0xf1, 0x06, 0xe3, 0x15, 0xb0, 0x17,
	0x88, 0xca, 0xc1, 0x57, 0xf4, 0x8d, 0x08, 0x07, 0xdf, 0xb8, 0xaf, 0x74, 0x97, 0xed, 0xee, 0xe3,
	0x2a, 0xcc, 0x78, 0x0d, 0xd1, 0x07, 0xf9, 0x46, 0xe9, 0xf4, 0x3c, 0xd0, 0x45, 0xe1, 0x15, 0x1c,
	0x35, 0x8d, 0xa4, 0xd3, 0x7d, 0xc0, 0xb3, 0x60, 0x77, 0x70, 0xac, 0x2b, 0x72, 0xfd, 0xb4, 0x26,
	0x6b, 0x8d, 0x5d, 0xbc, 0x66, 0xc1, 0x62, 0xb8, 0x78, 0x55, 0x6e, 0xfa, 0x55, 0xf4, 0x90, 0xd4,
	0x7f, 0x11, 0xde, 0xc8, 0x8e, 0x4a, 0x10, 0x3e, 0xc0, 0xbe, 0x1c, 0x3c, 0x5e, 0xf2, 0xff, 0xb4,
	0x73, 0xb2, 0xdb, 0x64, 0x83, 0xc2, 0x03, 0x76, 0x86, 0x1c, 0x0e, 0x93, 0x19, 0xe2, 0x66, 0xb7,
	0xb8, 0x9f, 0xba, 0x7f, 0x66, 0xef, 0xd9, 0xa7, 0xf2, 0x72, 0x68, 0xb9, 0x30, 0x5d, 0x2e, 0x1e,
	0x0b, 0x97, 0x3b, 0x21, 0xa9, 0xdb, 0x94, 0xd3, 0x46, 0xa1, 0x9d, 0xa7, 0xdf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xd6, 0x01, 0x6b, 0xed, 0x3a, 0x01, 0x00, 0x00,
}
