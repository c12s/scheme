// Code generated by protoc-gen-go. DO NOT EDIT.
// source: meridian/meridian.proto

/*
Package meridian is a generated protocol buffer package.

It is generated from these files:
	meridian/meridian.proto

It has these top-level messages:
	NSReq
	NSResp
*/
package meridian

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import celestial "github.com/c12s/scheme/celestial"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NSReq struct {
	Name   string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Extras map[string]string `protobuf:"bytes,2,rep,name=extras" json:"extras,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *NSReq) Reset()                    { *m = NSReq{} }
func (m *NSReq) String() string            { return proto.CompactTextString(m) }
func (*NSReq) ProtoMessage()               {}
func (*NSReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NSReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NSReq) GetExtras() map[string]string {
	if m != nil {
		return m.Extras
	}
	return nil
}

type NSResp struct {
	Extras map[string]string `protobuf:"bytes,1,rep,name=extras" json:"extras,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *NSResp) Reset()                    { *m = NSResp{} }
func (m *NSResp) String() string            { return proto.CompactTextString(m) }
func (*NSResp) ProtoMessage()               {}
func (*NSResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NSResp) GetExtras() map[string]string {
	if m != nil {
		return m.Extras
	}
	return nil
}

func init() {
	proto.RegisterType((*NSReq)(nil), "meridian.NSReq")
	proto.RegisterType((*NSResp)(nil), "meridian.NSResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MeridianService service

type MeridianServiceClient interface {
	List(ctx context.Context, in *celestial.ListReq, opts ...grpc.CallOption) (*celestial.ListResp, error)
	Mutate(ctx context.Context, in *celestial.MutateReq, opts ...grpc.CallOption) (*celestial.MutateResp, error)
	Exists(ctx context.Context, in *NSReq, opts ...grpc.CallOption) (*NSResp, error)
}

type meridianServiceClient struct {
	cc *grpc.ClientConn
}

func NewMeridianServiceClient(cc *grpc.ClientConn) MeridianServiceClient {
	return &meridianServiceClient{cc}
}

func (c *meridianServiceClient) List(ctx context.Context, in *celestial.ListReq, opts ...grpc.CallOption) (*celestial.ListResp, error) {
	out := new(celestial.ListResp)
	err := grpc.Invoke(ctx, "/meridian.MeridianService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meridianServiceClient) Mutate(ctx context.Context, in *celestial.MutateReq, opts ...grpc.CallOption) (*celestial.MutateResp, error) {
	out := new(celestial.MutateResp)
	err := grpc.Invoke(ctx, "/meridian.MeridianService/Mutate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meridianServiceClient) Exists(ctx context.Context, in *NSReq, opts ...grpc.CallOption) (*NSResp, error) {
	out := new(NSResp)
	err := grpc.Invoke(ctx, "/meridian.MeridianService/Exists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MeridianService service

type MeridianServiceServer interface {
	List(context.Context, *celestial.ListReq) (*celestial.ListResp, error)
	Mutate(context.Context, *celestial.MutateReq) (*celestial.MutateResp, error)
	Exists(context.Context, *NSReq) (*NSResp, error)
}

func RegisterMeridianServiceServer(s *grpc.Server, srv MeridianServiceServer) {
	s.RegisterService(&_MeridianService_serviceDesc, srv)
}

func _MeridianService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(celestial.ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeridianServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meridian.MeridianService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeridianServiceServer).List(ctx, req.(*celestial.ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeridianService_Mutate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(celestial.MutateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeridianServiceServer).Mutate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meridian.MeridianService/Mutate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeridianServiceServer).Mutate(ctx, req.(*celestial.MutateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeridianService_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeridianServiceServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meridian.MeridianService/Exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeridianServiceServer).Exists(ctx, req.(*NSReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _MeridianService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "meridian.MeridianService",
	HandlerType: (*MeridianServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _MeridianService_List_Handler,
		},
		{
			MethodName: "Mutate",
			Handler:    _MeridianService_Mutate_Handler,
		},
		{
			MethodName: "Exists",
			Handler:    _MeridianService_Exists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meridian/meridian.proto",
}

func init() { proto.RegisterFile("meridian/meridian.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 298 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0x4d, 0x4f, 0xfa, 0x40,
	0x10, 0xc6, 0x59, 0x5e, 0x9a, 0xff, 0x7f, 0x38, 0x40, 0x46, 0x8c, 0x58, 0x4d, 0xc4, 0x9e, 0xb8,
	0xd8, 0x06, 0x30, 0xf1, 0xe5, 0x68, 0xd2, 0x9b, 0x78, 0x28, 0x37, 0x6f, 0x4b, 0x9d, 0xc8, 0xc6,
	0xbe, 0xd1, 0xdd, 0x12, 0xfa, 0x19, 0xfc, 0x2a, 0x7e, 0x48, 0xd3, 0x6d, 0xa9, 0x88, 0x1e, 0xbd,
	0x3d, 0xf3, 0xec, 0x3c, 0xf3, 0xcb, 0xce, 0x2e, 0x9c, 0x84, 0x94, 0x8a, 0x17, 0xc1, 0x23, 0x67,
	0x27, 0xec, 0x24, 0x8d, 0x55, 0x8c, 0xff, 0x76, 0xb5, 0x79, 0xea, 0x53, 0x40, 0x52, 0x09, 0x1e,
	0x38, 0xb5, 0x2a, 0x9b, 0xac, 0x77, 0x06, 0x9d, 0xa7, 0x85, 0x47, 0x6b, 0x44, 0x68, 0x47, 0x3c,
	0xa4, 0x21, 0x1b, 0xb1, 0xf1, 0x7f, 0x4f, 0x6b, 0x9c, 0x81, 0x41, 0x5b, 0x95, 0x72, 0x39, 0x6c,
	0x8e, 0x5a, 0xe3, 0xee, 0xf4, 0xcc, 0xae, 0x19, 0x3a, 0x64, 0xbb, 0xfa, 0xd4, 0x8d, 0x54, 0x9a,
	0x7b, 0x55, 0xab, 0x79, 0x07, 0xdd, 0x3d, 0x1b, 0xfb, 0xd0, 0x7a, 0xa3, 0xbc, 0x1a, 0x5b, 0x48,
	0x1c, 0x40, 0x67, 0xc3, 0x83, 0x8c, 0x86, 0x4d, 0xed, 0x95, 0xc5, 0x7d, 0xf3, 0x96, 0x59, 0x39,
	0x18, 0xc5, 0x5c, 0x99, 0xe0, 0x75, 0x4d, 0x66, 0x9a, 0x7c, 0xfe, 0x9d, 0x2c, 0x93, 0x3f, 0x46,
	0x4f, 0x3f, 0x18, 0xf4, 0xe6, 0x15, 0x62, 0x41, 0xe9, 0x46, 0xf8, 0x84, 0x13, 0x68, 0x3f, 0x0a,
	0xa9, 0x10, 0xed, 0xaf, 0xb5, 0x15, 0x86, 0x47, 0x6b, 0xf3, 0xe8, 0x87, 0x27, 0x13, 0xab, 0x81,
	0x37, 0x60, 0xcc, 0x33, 0xc5, 0x15, 0xe1, 0x60, 0xaf, 0xa1, 0xb4, 0x8a, 0xd8, 0xf1, 0x2f, 0xae,
	0x0e, 0x5e, 0x81, 0xe1, 0x6e, 0x85, 0x54, 0x12, 0x7b, 0x07, 0x4b, 0x36, 0xfb, 0x87, 0x77, 0xb7,
	0x1a, 0x0f, 0x97, 0xcf, 0x17, 0xaf, 0x42, 0xad, 0xb2, 0xa5, 0xed, 0xc7, 0xa1, 0xe3, 0x4f, 0xa6,
	0xd2, 0x91, 0xfe, 0x8a, 0x42, 0xaa, 0x7f, 0xc1, 0xd2, 0xd0, 0x2f, 0x3c, 0xfb, 0x0c, 0x00, 0x00,
	0xff, 0xff, 0xe0, 0xf3, 0x5b, 0x2f, 0x21, 0x02, 0x00, 0x00,
}
