// Code generated by protoc-gen-go. DO NOT EDIT.
// source: core/core.proto

/*
Package core is a generated protocol buffer package.

It is generated from these files:
	core/core.proto

It has these top-level messages:
	UndoneKV
	KVData
	KV
	Task
*/
package core

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import blackhole "github.com/c12s/scheme/blackhole"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TaskStatus int32

const (
	TaskStatus_Waiting TaskStatus = 0
	TaskStatus_Working TaskStatus = 1
	TaskStatus_Done    TaskStatus = 2
)

var TaskStatus_name = map[int32]string{
	0: "Waiting",
	1: "Working",
	2: "Done",
}
var TaskStatus_value = map[string]int32{
	"Waiting": 0,
	"Working": 1,
	"Done":    2,
}

func (x TaskStatus) String() string {
	return proto.EnumName(TaskStatus_name, int32(x))
}
func (TaskStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type UndoneKV struct {
	Undone map[string]*KV `protobuf:"bytes,1,rep,name=undone" json:"undone,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *UndoneKV) Reset()                    { *m = UndoneKV{} }
func (m *UndoneKV) String() string            { return proto.CompactTextString(m) }
func (*UndoneKV) ProtoMessage()               {}
func (*UndoneKV) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UndoneKV) GetUndone() map[string]*KV {
	if m != nil {
		return m.Undone
	}
	return nil
}

type KVData struct {
	Value  string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	Status string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *KVData) Reset()                    { *m = KVData{} }
func (m *KVData) String() string            { return proto.CompactTextString(m) }
func (*KVData) ProtoMessage()               {}
func (*KVData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *KVData) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *KVData) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type KV struct {
	Extras    map[string]*KVData `protobuf:"bytes,1,rep,name=extras" json:"extras,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Timestamp int64              `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Index     []string           `protobuf:"bytes,3,rep,name=index" json:"index,omitempty"`
	UserId    string             `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *KV) Reset()                    { *m = KV{} }
func (m *KV) String() string            { return proto.CompactTextString(m) }
func (*KV) ProtoMessage()               {}
func (*KV) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *KV) GetExtras() map[string]*KVData {
	if m != nil {
		return m.Extras
	}
	return nil
}

func (m *KV) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *KV) GetIndex() []string {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *KV) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type Task struct {
	UserId    string             `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Kind      blackhole.TaskKind `protobuf:"varint,2,opt,name=kind,enum=blackhole.TaskKind" json:"kind,omitempty"`
	Timestamp int64              `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Namespace string             `protobuf:"bytes,4,opt,name=namespace" json:"namespace,omitempty"`
	Task      *blackhole.PutTask `protobuf:"bytes,5,opt,name=task" json:"task,omitempty"`
	Status    TaskStatus         `protobuf:"varint,6,opt,name=status,enum=core.TaskStatus" json:"status,omitempty"`
	Extras    map[string]string  `protobuf:"bytes,7,rep,name=extras" json:"extras,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Task) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Task) GetKind() blackhole.TaskKind {
	if m != nil {
		return m.Kind
	}
	return blackhole.TaskKind_NO_VALUE_TASK
}

func (m *Task) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Task) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Task) GetTask() *blackhole.PutTask {
	if m != nil {
		return m.Task
	}
	return nil
}

func (m *Task) GetStatus() TaskStatus {
	if m != nil {
		return m.Status
	}
	return TaskStatus_Waiting
}

func (m *Task) GetExtras() map[string]string {
	if m != nil {
		return m.Extras
	}
	return nil
}

func init() {
	proto.RegisterType((*UndoneKV)(nil), "core.UndoneKV")
	proto.RegisterType((*KVData)(nil), "core.KVData")
	proto.RegisterType((*KV)(nil), "core.KV")
	proto.RegisterType((*Task)(nil), "core.Task")
	proto.RegisterEnum("core.TaskStatus", TaskStatus_name, TaskStatus_value)
}

func init() { proto.RegisterFile("core/core.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 457 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0x76, 0x92, 0x6c, 0xda, 0xbc, 0x88, 0x96, 0xb1, 0xac, 0x31, 0xae, 0x52, 0x7a, 0xd0, 0x22,
	0x92, 0x6a, 0x04, 0x51, 0x8f, 0xba, 0x8b, 0x48, 0x2e, 0x12, 0x35, 0x82, 0x17, 0x99, 0x26, 0xc3,
	0x36, 0xa4, 0x99, 0x94, 0xcc, 0x44, 0x76, 0xcf, 0xfe, 0x32, 0x6f, 0xfe, 0x2c, 0x99, 0x99, 0xa4,
	0x99, 0x95, 0x85, 0xbd, 0x94, 0xf7, 0x5e, 0xbe, 0xbe, 0xef, 0xfb, 0xde, 0xc7, 0xc0, 0xdd, 0xbc,
	0x69, 0xe9, 0x5a, 0xfe, 0x44, 0xfb, 0xb6, 0x11, 0x0d, 0x76, 0x64, 0x1d, 0x3e, 0xd8, 0xec, 0x48,
	0x5e, 0x6d, 0x9b, 0x1d, 0x5d, 0x1f, 0x2a, 0x0d, 0x58, 0xfe, 0x46, 0x30, 0xfd, 0xc6, 0x8a, 0x86,
	0xd1, 0x24, 0xc3, 0x31, 0xb8, 0x9d, 0xaa, 0x03, 0xb4, 0xb0, 0x57, 0x7e, 0x1c, 0x46, 0x6a, 0xd5,
	0xf0, 0xbd, 0x2f, 0xce, 0x98, 0x68, 0x2f, 0xd3, 0x1e, 0x19, 0x7e, 0x00, 0xdf, 0x18, 0xe3, 0x19,
	0xd8, 0x15, 0xbd, 0x0c, 0xd0, 0x02, 0xad, 0xbc, 0x54, 0x96, 0xf8, 0x31, 0x1c, 0xfd, 0x22, 0xbb,
	0x8e, 0x06, 0xd6, 0x02, 0xad, 0xfc, 0x78, 0xaa, 0x77, 0x26, 0x59, 0xaa, 0xc7, 0xef, 0xac, 0x37,
	0x68, 0xf9, 0x1a, 0xdc, 0x24, 0x3b, 0x25, 0x82, 0xe0, 0xf9, 0x80, 0xd6, 0x1b, 0x74, 0x83, 0x8f,
	0xc1, 0xe5, 0x82, 0x88, 0x8e, 0xab, 0x25, 0x5e, 0xda, 0x77, 0xcb, 0xbf, 0x08, 0xac, 0x24, 0xc3,
	0xcf, 0xc1, 0xa5, 0x17, 0xa2, 0x25, 0xbc, 0xd7, 0x3d, 0x1f, 0x38, 0xa2, 0x33, 0x35, 0xee, 0x15,
	0x6b, 0x0c, 0x3e, 0x01, 0x4f, 0x94, 0x35, 0xe5, 0x82, 0xd4, 0x7b, 0xb5, 0xcf, 0x4e, 0xc7, 0x81,
	0x14, 0x50, 0xb2, 0x82, 0x5e, 0x04, 0xf6, 0xc2, 0x96, 0x02, 0x54, 0x83, 0xef, 0xc3, 0xa4, 0xe3,
	0xb4, 0xfd, 0x59, 0x16, 0x81, 0xa3, 0x15, 0xc8, 0xf6, 0x53, 0x11, 0x7e, 0x04, 0xdf, 0xe0, 0xb8,
	0xc6, 0xfe, 0xf2, 0xaa, 0xfd, 0xdb, 0x83, 0x34, 0xe9, 0xd6, 0x3c, 0xc1, 0x1f, 0x0b, 0x9c, 0xaf,
	0x84, 0x57, 0x26, 0x15, 0x32, 0xa9, 0xf0, 0x53, 0x70, 0xaa, 0x92, 0x15, 0x6a, 0xd1, 0x9d, 0xf8,
	0x5e, 0x34, 0x46, 0x29, 0xff, 0x97, 0x94, 0xac, 0x48, 0x15, 0xe0, 0xaa, 0x41, 0xfb, 0x7f, 0x83,
	0x27, 0xe0, 0x31, 0x52, 0x53, 0xbe, 0x27, 0x39, 0xed, 0xcd, 0x8c, 0x03, 0xfc, 0x04, 0x1c, 0x41,
	0x78, 0x15, 0x1c, 0x29, 0xb5, 0xd8, 0x20, 0xf9, 0xdc, 0x09, 0xc9, 0x93, 0xaa, 0xef, 0x78, 0x75,
	0x48, 0xc4, 0x55, 0x72, 0x66, 0xda, 0x97, 0x44, 0x7c, 0x51, 0xf3, 0x21, 0x23, 0x1c, 0x1d, 0xc2,
	0x99, 0xa8, 0x70, 0x8e, 0x47, 0xe4, 0x75, 0xf1, 0x84, 0x6f, 0x6f, 0xba, 0xe8, 0xdc, 0xbc, 0xa8,
	0x67, 0xdc, 0xf0, 0xd9, 0x0b, 0x80, 0x51, 0x00, 0xf6, 0x61, 0xf2, 0x9d, 0x94, 0xa2, 0x64, 0xe7,
	0xb3, 0x5b, 0xaa, 0x69, 0xda, 0x4a, 0x36, 0x08, 0x4f, 0xc1, 0x39, 0x6d, 0x18, 0x9d, 0x59, 0xef,
	0x1f, 0xfd, 0x78, 0x78, 0x5e, 0x8a, 0x6d, 0xb7, 0x89, 0xf2, 0xa6, 0x5e, 0xe7, 0x2f, 0x63, 0xbe,
	0xe6, 0xf9, 0x96, 0xd6, 0xfa, 0x11, 0x6d, 0x5c, 0xf5, 0x48, 0x5e, 0xfd, 0x0b, 0x00, 0x00, 0xff,
	0xff, 0x94, 0x90, 0xa3, 0x08, 0x58, 0x03, 0x00, 0x00,
}
