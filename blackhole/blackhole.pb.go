// Code generated by protoc-gen-go. DO NOT EDIT.
// source: blackhole/blackhole.proto

/*
Package blackhole is a generated protocol buffer package.

It is generated from these files:
	blackhole/blackhole.proto

It has these top-level messages:
	Strategy
	Selector
	Payload
	Metadata
	PutTask
	PutReq
	Resp
*/
package blackhole

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Enums
type TaskKind int32

const (
	TaskKind_NO_VALUE_TASK TaskKind = 0
	TaskKind_CONFIGS       TaskKind = 1
	TaskKind_ACTIONS       TaskKind = 2
	TaskKind_SECRETS       TaskKind = 3
	TaskKind_NAMESPACES    TaskKind = 4
	TaskKind_ROLES         TaskKind = 5
)

var TaskKind_name = map[int32]string{
	0: "NO_VALUE_TASK",
	1: "CONFIGS",
	2: "ACTIONS",
	3: "SECRETS",
	4: "NAMESPACES",
	5: "ROLES",
}
var TaskKind_value = map[string]int32{
	"NO_VALUE_TASK": 0,
	"CONFIGS":       1,
	"ACTIONS":       2,
	"SECRETS":       3,
	"NAMESPACES":    4,
	"ROLES":         5,
}

func (x TaskKind) String() string {
	return proto.EnumName(TaskKind_name, int32(x))
}
func (TaskKind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PayloadKind int32

const (
	PayloadKind_NO_VALUE_PAYLOAD PayloadKind = 0
	PayloadKind_FILE             PayloadKind = 1
	PayloadKind_ENV              PayloadKind = 2
	PayloadKind_ACTION           PayloadKind = 3
)

var PayloadKind_name = map[int32]string{
	0: "NO_VALUE_PAYLOAD",
	1: "FILE",
	2: "ENV",
	3: "ACTION",
}
var PayloadKind_value = map[string]int32{
	"NO_VALUE_PAYLOAD": 0,
	"FILE":             1,
	"ENV":              2,
	"ACTION":           3,
}

func (x PayloadKind) String() string {
	return proto.EnumName(PayloadKind_name, int32(x))
}
func (PayloadKind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type StrategyKind int32

const (
	StrategyKind_NO_VALUE_STRATEGY StrategyKind = 0
	StrategyKind_AT_ONCE           StrategyKind = 1
	StrategyKind_ROLLING_UPDATE    StrategyKind = 2
	StrategyKind_CANARY            StrategyKind = 3
)

var StrategyKind_name = map[int32]string{
	0: "NO_VALUE_STRATEGY",
	1: "AT_ONCE",
	2: "ROLLING_UPDATE",
	3: "CANARY",
}
var StrategyKind_value = map[string]int32{
	"NO_VALUE_STRATEGY": 0,
	"AT_ONCE":           1,
	"ROLLING_UPDATE":    2,
	"CANARY":            3,
}

func (x StrategyKind) String() string {
	return proto.EnumName(StrategyKind_name, int32(x))
}
func (StrategyKind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type CompareKind int32

const (
	CompareKind_NO_VALUE_COMPARE CompareKind = 0
	CompareKind_ALL              CompareKind = 1
	CompareKind_ANY              CompareKind = 2
)

var CompareKind_name = map[int32]string{
	0: "NO_VALUE_COMPARE",
	1: "ALL",
	2: "ANY",
}
var CompareKind_value = map[string]int32{
	"NO_VALUE_COMPARE": 0,
	"ALL":              1,
	"ANY":              2,
}

func (x CompareKind) String() string {
	return proto.EnumName(CompareKind_name, int32(x))
}
func (CompareKind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// Request helper messages
type Strategy struct {
	Type     StrategyKind      `protobuf:"varint,1,opt,name=type,enum=blackhole.StrategyKind" json:"type,omitempty"`
	Kind     string            `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
	Interval string            `protobuf:"bytes,3,opt,name=interval" json:"interval,omitempty"`
	Retry    map[string]string `protobuf:"bytes,4,rep,name=retry" json:"retry,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Strategy) Reset()                    { *m = Strategy{} }
func (m *Strategy) String() string            { return proto.CompactTextString(m) }
func (*Strategy) ProtoMessage()               {}
func (*Strategy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Strategy) GetType() StrategyKind {
	if m != nil {
		return m.Type
	}
	return StrategyKind_NO_VALUE_STRATEGY
}

func (m *Strategy) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *Strategy) GetInterval() string {
	if m != nil {
		return m.Interval
	}
	return ""
}

func (m *Strategy) GetRetry() map[string]string {
	if m != nil {
		return m.Retry
	}
	return nil
}

type Selector struct {
	Kind   CompareKind       `protobuf:"varint,1,opt,name=kind,enum=blackhole.CompareKind" json:"kind,omitempty"`
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Selector) Reset()                    { *m = Selector{} }
func (m *Selector) String() string            { return proto.CompactTextString(m) }
func (*Selector) ProtoMessage()               {}
func (*Selector) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Selector) GetKind() CompareKind {
	if m != nil {
		return m.Kind
	}
	return CompareKind_NO_VALUE_COMPARE
}

func (m *Selector) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type Payload struct {
	Kind  PayloadKind       `protobuf:"varint,1,opt,name=kind,enum=blackhole.PayloadKind" json:"kind,omitempty"`
	Value map[string]string `protobuf:"bytes,2,rep,name=value" json:"value,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Index []string          `protobuf:"bytes,3,rep,name=index" json:"index,omitempty"`
}

func (m *Payload) Reset()                    { *m = Payload{} }
func (m *Payload) String() string            { return proto.CompactTextString(m) }
func (*Payload) ProtoMessage()               {}
func (*Payload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Payload) GetKind() PayloadKind {
	if m != nil {
		return m.Kind
	}
	return PayloadKind_NO_VALUE_PAYLOAD
}

func (m *Payload) GetValue() map[string]string {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Payload) GetIndex() []string {
	if m != nil {
		return m.Index
	}
	return nil
}

type Metadata struct {
	TaskName            string `protobuf:"bytes,1,opt,name=taskName" json:"taskName,omitempty"`
	Timestamp           int64  `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Namespace           string `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
	ForceNamespaceQueue bool   `protobuf:"varint,4,opt,name=forceNamespaceQueue" json:"forceNamespaceQueue,omitempty"`
	Queue               string `protobuf:"bytes,5,opt,name=queue" json:"queue,omitempty"`
}

func (m *Metadata) Reset()                    { *m = Metadata{} }
func (m *Metadata) String() string            { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()               {}
func (*Metadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Metadata) GetTaskName() string {
	if m != nil {
		return m.TaskName
	}
	return ""
}

func (m *Metadata) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Metadata) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Metadata) GetForceNamespaceQueue() bool {
	if m != nil {
		return m.ForceNamespaceQueue
	}
	return false
}

func (m *Metadata) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

type PutTask struct {
	RegionId  string     `protobuf:"bytes,1,opt,name=region_id,json=regionId" json:"region_id,omitempty"`
	ClusterId string     `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId" json:"cluster_id,omitempty"`
	Strategy  *Strategy  `protobuf:"bytes,3,opt,name=strategy" json:"strategy,omitempty"`
	Selector  *Selector  `protobuf:"bytes,4,opt,name=selector" json:"selector,omitempty"`
	Payload   []*Payload `protobuf:"bytes,5,rep,name=payload" json:"payload,omitempty"`
}

func (m *PutTask) Reset()                    { *m = PutTask{} }
func (m *PutTask) String() string            { return proto.CompactTextString(m) }
func (*PutTask) ProtoMessage()               {}
func (*PutTask) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PutTask) GetRegionId() string {
	if m != nil {
		return m.RegionId
	}
	return ""
}

func (m *PutTask) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *PutTask) GetStrategy() *Strategy {
	if m != nil {
		return m.Strategy
	}
	return nil
}

func (m *PutTask) GetSelector() *Selector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (m *PutTask) GetPayload() []*Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

// Reques messages
type PutReq struct {
	Version string            `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	UserId  string            `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Kind    TaskKind          `protobuf:"varint,3,opt,name=kind,enum=blackhole.TaskKind" json:"kind,omitempty"`
	Mtdata  *Metadata         `protobuf:"bytes,4,opt,name=mtdata" json:"mtdata,omitempty"`
	Tasks   []*PutTask        `protobuf:"bytes,5,rep,name=tasks" json:"tasks,omitempty"`
	Extras  map[string]string `protobuf:"bytes,6,rep,name=extras" json:"extras,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PutReq) Reset()                    { *m = PutReq{} }
func (m *PutReq) String() string            { return proto.CompactTextString(m) }
func (*PutReq) ProtoMessage()               {}
func (*PutReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PutReq) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *PutReq) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *PutReq) GetKind() TaskKind {
	if m != nil {
		return m.Kind
	}
	return TaskKind_NO_VALUE_TASK
}

func (m *PutReq) GetMtdata() *Metadata {
	if m != nil {
		return m.Mtdata
	}
	return nil
}

func (m *PutReq) GetTasks() []*PutTask {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func (m *PutReq) GetExtras() map[string]string {
	if m != nil {
		return m.Extras
	}
	return nil
}

// Response message
type Resp struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
}

func (m *Resp) Reset()                    { *m = Resp{} }
func (m *Resp) String() string            { return proto.CompactTextString(m) }
func (*Resp) ProtoMessage()               {}
func (*Resp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Resp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*Strategy)(nil), "blackhole.Strategy")
	proto.RegisterType((*Selector)(nil), "blackhole.Selector")
	proto.RegisterType((*Payload)(nil), "blackhole.Payload")
	proto.RegisterType((*Metadata)(nil), "blackhole.Metadata")
	proto.RegisterType((*PutTask)(nil), "blackhole.PutTask")
	proto.RegisterType((*PutReq)(nil), "blackhole.PutReq")
	proto.RegisterType((*Resp)(nil), "blackhole.Resp")
	proto.RegisterEnum("blackhole.TaskKind", TaskKind_name, TaskKind_value)
	proto.RegisterEnum("blackhole.PayloadKind", PayloadKind_name, PayloadKind_value)
	proto.RegisterEnum("blackhole.StrategyKind", StrategyKind_name, StrategyKind_value)
	proto.RegisterEnum("blackhole.CompareKind", CompareKind_name, CompareKind_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BlackHoleService service

type BlackHoleServiceClient interface {
	Put(ctx context.Context, in *PutReq, opts ...grpc.CallOption) (*Resp, error)
}

type blackHoleServiceClient struct {
	cc *grpc.ClientConn
}

func NewBlackHoleServiceClient(cc *grpc.ClientConn) BlackHoleServiceClient {
	return &blackHoleServiceClient{cc}
}

func (c *blackHoleServiceClient) Put(ctx context.Context, in *PutReq, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := grpc.Invoke(ctx, "/blackhole.BlackHoleService/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BlackHoleService service

type BlackHoleServiceServer interface {
	Put(context.Context, *PutReq) (*Resp, error)
}

func RegisterBlackHoleServiceServer(s *grpc.Server, srv BlackHoleServiceServer) {
	s.RegisterService(&_BlackHoleService_serviceDesc, srv)
}

func _BlackHoleService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackHoleServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blackhole.BlackHoleService/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackHoleServiceServer).Put(ctx, req.(*PutReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _BlackHoleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "blackhole.BlackHoleService",
	HandlerType: (*BlackHoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _BlackHoleService_Put_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blackhole/blackhole.proto",
}

func init() { proto.RegisterFile("blackhole/blackhole.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 845 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0x6d, 0x6f, 0xe3, 0x44,
	0x10, 0xc7, 0xeb, 0x38, 0x8f, 0x13, 0x28, 0xee, 0xdc, 0xc1, 0x99, 0xc2, 0x41, 0x94, 0x37, 0x44,
	0x29, 0x4a, 0x21, 0xc7, 0x89, 0x83, 0x37, 0xc8, 0xcd, 0xf9, 0x4a, 0x74, 0xae, 0x13, 0xd6, 0xb9,
	0x4a, 0xe5, 0x4d, 0xb4, 0xb5, 0x97, 0xd4, 0x8a, 0x1d, 0xe7, 0xec, 0x75, 0xd5, 0x7c, 0x25, 0x24,
	0xbe, 0x00, 0xdf, 0x03, 0xf1, 0x75, 0xd0, 0xae, 0x1d, 0xc7, 0x90, 0x08, 0xa9, 0xef, 0x3c, 0x33,
	0xff, 0x19, 0xff, 0x66, 0x67, 0xd6, 0x86, 0x4f, 0x6f, 0x03, 0xea, 0x2e, 0xef, 0xa2, 0x80, 0x9d,
	0x17, 0x4f, 0x83, 0x75, 0x1c, 0xf1, 0x08, 0x5b, 0x85, 0xa3, 0xfb, 0xb7, 0x02, 0x4d, 0x87, 0xc7,
	0x94, 0xb3, 0xc5, 0x06, 0xcf, 0xa0, 0xca, 0x37, 0x6b, 0xa6, 0x2b, 0x1d, 0xa5, 0x77, 0x3c, 0x7c,
	0x36, 0xd8, 0xe5, 0x6d, 0x25, 0x6f, 0xfd, 0x95, 0x47, 0xa4, 0x08, 0x11, 0xaa, 0x4b, 0x7f, 0xe5,
	0xe9, 0x95, 0x8e, 0xd2, 0x6b, 0x11, 0xf9, 0x8c, 0xa7, 0xd0, 0xf4, 0x57, 0x9c, 0xc5, 0xf7, 0x34,
	0xd0, 0x55, 0xe9, 0x2f, 0x6c, 0xfc, 0x0e, 0x6a, 0x31, 0xe3, 0xf1, 0x46, 0xaf, 0x76, 0xd4, 0x5e,
	0x7b, 0xf8, 0xc5, 0x81, 0xea, 0x03, 0x22, 0x04, 0xe6, 0x8a, 0xc7, 0x1b, 0x92, 0x89, 0x4f, 0x5f,
	0x01, 0xec, 0x9c, 0xa8, 0x81, 0xba, 0x64, 0x1b, 0xc9, 0xd7, 0x22, 0xe2, 0x11, 0x9f, 0x42, 0xed,
	0x9e, 0x06, 0x29, 0xcb, 0x31, 0x32, 0xe3, 0xc7, 0xca, 0x2b, 0xa5, 0xfb, 0xbb, 0xe8, 0x8c, 0x05,
	0xcc, 0xe5, 0x51, 0x8c, 0xfd, 0x1c, 0x36, 0xeb, 0xec, 0x93, 0xd2, 0xbb, 0x47, 0x51, 0xb8, 0xa6,
	0x31, 0xcb, 0x1a, 0x93, 0x4d, 0x7c, 0x0f, 0xf5, 0x80, 0xde, 0xb2, 0x20, 0xd1, 0x2b, 0x92, 0xf4,
	0xcb, 0x32, 0x69, 0x5e, 0x70, 0x60, 0x49, 0x45, 0x86, 0x9a, 0xcb, 0x4f, 0x7f, 0x80, 0x76, 0xc9,
	0xfd, 0x28, 0xd8, 0x3f, 0x15, 0x68, 0x4c, 0xe9, 0x26, 0x88, 0xa8, 0xf7, 0x3f, 0xac, 0xb9, 0xa2,
	0xc4, 0xfa, 0x62, 0x57, 0x51, 0xa0, 0x3e, 0xdf, 0x17, 0x0f, 0xae, 0x45, 0x3c, 0x3f, 0x53, 0xa9,
	0x15, 0x18, 0xfe, 0xca, 0x63, 0x0f, 0xba, 0xda, 0x51, 0x05, 0x86, 0x34, 0xc4, 0x49, 0xef, 0xa4,
	0x8f, 0x3e, 0xe9, 0x2b, 0xc6, 0xa9, 0x47, 0x39, 0x15, 0x2b, 0xc0, 0x69, 0xb2, 0xb4, 0x69, 0xc8,
	0xf2, 0xec, 0xc2, 0xc6, 0xcf, 0xa1, 0xc5, 0xfd, 0x90, 0x25, 0x9c, 0x86, 0x6b, 0x59, 0x46, 0x25,
	0x3b, 0x87, 0x88, 0xae, 0x68, 0xc8, 0x92, 0x35, 0x75, 0x59, 0xbe, 0x3d, 0x3b, 0x07, 0x7e, 0x03,
	0x4f, 0x7e, 0x8b, 0x62, 0x97, 0xd9, 0x5b, 0xcf, 0x2f, 0x29, 0x4b, 0x99, 0x5e, 0xed, 0x28, 0xbd,
	0x26, 0x39, 0x14, 0x12, 0xc0, 0xef, 0xa5, 0xa6, 0x96, 0x01, 0x4b, 0xa3, 0xfb, 0x97, 0x38, 0xe9,
	0x94, 0xcf, 0x68, 0xb2, 0xc4, 0xcf, 0xa0, 0x15, 0xb3, 0x85, 0x1f, 0xad, 0xe6, 0xbe, 0xb7, 0x85,
	0xcd, 0x1c, 0x63, 0x0f, 0x9f, 0x03, 0xb8, 0x41, 0x9a, 0x70, 0x16, 0x8b, 0x68, 0xd6, 0x74, 0x2b,
	0xf7, 0x8c, 0x3d, 0x3c, 0x87, 0x66, 0x92, 0xaf, 0xad, 0x84, 0x6d, 0x0f, 0x9f, 0x1c, 0xd8, 0x68,
	0x52, 0x88, 0x64, 0x42, 0xbe, 0x3d, 0x92, 0xfa, 0x3f, 0x09, 0x79, 0x88, 0x14, 0x22, 0xfc, 0x1a,
	0x1a, 0xeb, 0x6c, 0x86, 0x7a, 0x4d, 0x4e, 0x17, 0xf7, 0xa7, 0x4b, 0xb6, 0x92, 0xee, 0x1f, 0x15,
	0xa8, 0x4f, 0x53, 0x4e, 0xd8, 0x7b, 0xd4, 0xa1, 0x71, 0xcf, 0xe2, 0xc4, 0x8f, 0x56, 0x79, 0x53,
	0x5b, 0x13, 0x9f, 0x41, 0x23, 0x4d, 0xca, 0x0d, 0xd5, 0x85, 0x39, 0xf6, 0xf0, 0xab, 0x7c, 0xe7,
	0x54, 0xb9, 0x73, 0x65, 0x30, 0x71, 0x50, 0xa5, 0x85, 0x3b, 0x83, 0x7a, 0xc8, 0xc5, 0xa0, 0x0f,
	0xf4, 0xb0, 0xdd, 0x01, 0x92, 0x4b, 0xb0, 0x07, 0x35, 0x31, 0xfb, 0xe4, 0x10, 0x7f, 0x36, 0x02,
	0x92, 0x09, 0xf0, 0x25, 0xd4, 0xd9, 0x03, 0x8f, 0x69, 0xa2, 0xd7, 0xf7, 0x17, 0x59, 0x76, 0x35,
	0x30, 0x65, 0x3c, 0xbf, 0x71, 0x99, 0x58, 0xdc, 0xb8, 0x92, 0xfb, 0x51, 0x4b, 0xab, 0x43, 0x95,
	0xb0, 0x64, 0x2d, 0x72, 0xc2, 0x64, 0xb1, 0xcd, 0x09, 0x93, 0x45, 0x7f, 0x0e, 0xcd, 0x6d, 0xd3,
	0x78, 0x02, 0x1f, 0xda, 0x93, 0xf9, 0xb5, 0x61, 0xbd, 0x33, 0xe7, 0x33, 0xc3, 0x79, 0xab, 0x1d,
	0x61, 0x1b, 0x1a, 0xa3, 0x89, 0xfd, 0x66, 0x7c, 0xe9, 0x68, 0x8a, 0x30, 0x8c, 0xd1, 0x6c, 0x3c,
	0xb1, 0x1d, 0xad, 0x22, 0x0c, 0xc7, 0x1c, 0x11, 0x73, 0xe6, 0x68, 0x2a, 0x1e, 0x03, 0xd8, 0xc6,
	0x95, 0xe9, 0x4c, 0x8d, 0x91, 0xe9, 0x68, 0x55, 0x6c, 0x41, 0x8d, 0x4c, 0x2c, 0xd3, 0xd1, 0x6a,
	0xfd, 0x0b, 0x68, 0x97, 0x6e, 0x32, 0x3e, 0x05, 0xad, 0x78, 0xc7, 0xd4, 0xb8, 0xb1, 0x26, 0xc6,
	0x6b, 0xed, 0x08, 0x9b, 0x50, 0x7d, 0x33, 0xb6, 0x4c, 0x4d, 0xc1, 0x06, 0xa8, 0xa6, 0x7d, 0xad,
	0x55, 0x10, 0xa0, 0x9e, 0xbd, 0x4c, 0x53, 0xfb, 0x04, 0x3e, 0x28, 0x7f, 0x93, 0xf1, 0x63, 0x38,
	0x29, 0x8a, 0x38, 0x33, 0x62, 0xcc, 0xcc, 0xcb, 0x9b, 0x0c, 0xd6, 0x98, 0xcd, 0x27, 0xf6, 0x48,
	0x14, 0x42, 0x38, 0x26, 0x13, 0xcb, 0x1a, 0xdb, 0x97, 0xf3, 0x77, 0xd3, 0xd7, 0xc6, 0xcc, 0xcc,
	0x6a, 0x8e, 0x0c, 0xdb, 0x20, 0x37, 0x9a, 0xda, 0x7f, 0x09, 0xed, 0xd2, 0xd7, 0xf0, 0x5f, 0x5c,
	0xa3, 0xc9, 0xd5, 0xd4, 0x20, 0xa6, 0x76, 0x24, 0x68, 0x0c, 0xcb, 0xca, 0xb0, 0x0c, 0xfb, 0x46,
	0xab, 0x0c, 0x7f, 0x02, 0xed, 0x42, 0x0c, 0xeb, 0xe7, 0x28, 0x60, 0x0e, 0x8b, 0xef, 0x7d, 0x97,
	0xe1, 0x19, 0xa8, 0xd3, 0x94, 0xe3, 0xc9, 0xde, 0x18, 0x4f, 0x3f, 0x2a, 0xb9, 0xc4, 0x00, 0xba,
	0x47, 0x17, 0xdd, 0x5f, 0x3b, 0x0b, 0x9f, 0xdf, 0xa5, 0xb7, 0x03, 0x37, 0x0a, 0xcf, 0xdd, 0x6f,
	0x87, 0xc9, 0x79, 0xe2, 0xde, 0xb1, 0xb0, 0xf4, 0xe3, 0xba, 0xad, 0xcb, 0x3f, 0xd7, 0x8b, 0x7f,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x99, 0xc4, 0x1d, 0xb6, 0xd6, 0x06, 0x00, 0x00,
}
